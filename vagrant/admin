#!/usr/bin/env bash
set -eo pipefail

masters="192.168.8.120,192.168.8.121,192.168.8.122"

# install the insecure private key so we can ssh easily between nodes
function copykeys() {
  cp -f /vagrant/vagrant/keys/test_id_rsa /home/vagrant/.ssh/id_rsa
  cp -f /vagrant/vagrant/keys/test_id_rsa.pub /home/vagrant/.ssh/id_rsa.pub

  chown vagrant:vagrant /home/vagrant/.ssh/id_rsa /home/vagrant/.ssh/id_rsa.pub
  chmod 600 /home/vagrant/.ssh/id_rsa /home/vagrant/.ssh/id_rsa.pub

  cat /vagrant/vagrant/keys/test_id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
}

function pullimages() {
  viking install master
  viking install slave
  docker pull binocarlos/etcdctl
}

function buildimage() {
  docker build -t binocarlos/viking /vagrant
}

function runssh() {
  cmd=$*
  ssh -oStrictHostKeyChecking=no node3 "$cmd" || true
  ssh -oStrictHostKeyChecking=no node2 "$cmd" || true
  ssh -oStrictHostKeyChecking=no node1 "$cmd" || true
}

case "$1" in

  bootstrap)
    shift
    ip=$1
    
    cat<<EOF >> /etc/hosts
192.168.8.120 node1
192.168.8.121 node2
192.168.8.122 node3
EOF

    cat<<EOF > /home/vagrant/.vikingrc
export ARPANET_IP=$ip
export ARPANET_MASTERS=$masters
export VIKING_DEV=/vagrant
EOF

    source /home/vagrant/.vikingrc
    copykeys
    cd /vagrant && make vagrant
    ;;

  # run a command over each vagrant server
  ssh)
    shift
    runssh $@
    ;;

  pull)
    pullimages
    ;;

  # update the images
  images)
    pullimages
    buildimage
    ;;

  # get the viking masters & slaves booted across the cluster
  start)
    shift
    ssh -oStrictHostKeyChecking=no node1 "viking master start --peers boot"
    ssh -oStrictHostKeyChecking=no node2 "viking master start --peers 192.168.8.120:7001"
    ssh -oStrictHostKeyChecking=no node3 "viking master start --peers 192.168.8.120:7001"
    $0 ssh viking slave start
    ;;

  # shutdown the viking masters & slaves across the cluster
  stop)
    shift
    cmd=$*
    $0 ssh viking slave stop
    $0 ssh viking master stop
    ;;

  cleanstacktest)
    shift
    viking docker stop testweb && viking docker rm testweb
    if [ -n "$1" ]; then
      viking docker stop testlogic.1 && viking docker rm testlogic.1
    fi
    viking docker stop testlogic.2 && viking docker rm testlogic.2
    viking docker stop testdb && viking docker rm testdb
    ;;

  stacktest)
    viking docker run -d --name testdb -p 80 binocarlos/viking-test-stack-db
    viking docker run -d --name testlogic.1 -p 80 binocarlos/viking-test-stack-logic
    viking docker run -d --name testweb --link testdb:db --link testlogic:logic -p 8080:80 binocarlos/viking-test-stack-web
    echo ""
    echo "test 1 (should be 12)"
    echo ""
    curl -L http://`viking locate testweb -f ip`:8080/add
    echo ""
    echo ""
    viking docker run -d --name testlogic.2 -p 80 binocarlos/viking-test-stack-logic
    sleep 1
    viking docker stop testlogic.1 && viking docker rm testlogic.1
    sleep 1
    echo ""
    echo "test 2 (should be 14)"
    echo ""
    curl -L http://`viking locate testweb -f ip`:8080/add
    echo ""
    echo ""
    $0 cleantest
    ;;

  imagetest)
    viking docker run -d --name test.1 binocarlos/bring-a-ping --timeout 1000
    viking docker run -d --name test.2 binocarlos/bring-a-ping --timeout 1000
    viking docker run -d --name test.3 binocarlos/bring-a-ping --timeout 1000
    $0 cleanimagetest
    ;;

  cleanimagetest)
    viking docker stop test.1 test.2 test.3
    viking docker rm test.1 test.2 test.3
    $0 ssh docker rmi --no-prune binocarlos/bring-a-ping
    ;;

  test)
    $0 stacktest
    $0 imagetest
    ;;

  cleantest)
    $0 cleanstacktest
    $0 cleanimagetest
    ;;

  help)
    echo
    cat<<EOF | sort
    help                                         Print the list of commands
    bootstrap                                    Install viking on a vagrant instance
    pull                                         Pull the core viking images
    images                                       Pull the core viking images and build the viking image
    ssh                                          Run an SSH command across all 3 servers
    start                                        Boot the master and slave across the cluster
    stop                                         Stop the master and slave across the cluster
    test                                         Run the tests
    cleantest                                    Clean up after the tests if they fail
    stacktest                                    Run the stack test
    cleanstacktest                               Clean after the stack test
    imagetest                                    Run the image test
    cleanimagetest                               Clean after the image test
EOF
    echo
    ;;

  *)
    $0 help
    ;;

esac