#!/bin/bash
readonly IMAGE="binocarlos/viking"
source ~/.vikingrc
export VIKING_MASTER_PORT=${VIKING_MASTER_PORT:=8791}

# Tools
devargs(){
	DEV_VOLUME=""
	DOCKER_ARGS="-d"
	if [ -n "$VIKING_DEV" ]; then
		DEV_VOLUME="-v $VIKING_DEV:/srv/viking"
		#DOCKER_ARGS="-ti --rm"
		#echo "running dev mode"
	fi
}

docker-environment(){
	echo "-e ARPANET_IP=$ARPANET_IP -e ARPANET_ETCD=$ARPANET_ETCD -e ARPANET_MASTERS=$ARPANET_MASTERS -e VIKING_MASTER_PORT=$VIKING_MASTER_PORT -e DOCKER_PORT=$DOCKER_PORT -e ETCD_PATH=$ETCD_PATH"
}

# Master actions
master-start() {
	arpanet master start $@
	sleep 1
	apiserver-start	$@
}

master-stop() {
	arpanet master stop $@
	apiserver-stop	$@
}

# api server actions
apiserver-start() {
	devargs
	docker run $DOCKER_ARGS \
		-p $VIKING_MASTER_PORT:80 `docker-environment` \
		--name vikingmaster \
		--hostname $HOSTNAME \
		-e "SERVICE_NAME=vikingmaster" \
		-e "VIKING_MASTER_PORT=$VIKING_MASTER_PORT" \
		$DEV_VOLUME \
		binocarlos/viking master $@
}

apiserver-stop() {
	docker stop vikingmaster && docker rm vikingmaster	
}

# slave actions
slave-start() {
	devargs
	arpanet slave start
	docker run --rm \
		`docker-environment` \
		--name vikingslave $DEV_VOLUME \
		--hostname $HOSTNAME \
		binocarlos/viking slave join $@
}

slave-stop() {
	devargs
	docker run --rm \
		`docker-environment` \
		--name vikingslave $DEV_VOLUME \
		--hostname $HOSTNAME \
		binocarlos/viking slave leave $@
	arpanet slave stop
}

# Master Controller
cmd-master() {	
	case "$1" in	
	start)              shift; master-start $@;;
	stop)               shift; master-stop $@;;
  *)
		echo "usage: viking master (start|stop)"
	;;
	esac
}


# Slave controller
cmd-slave() {
	case "$1" in
	start)              shift; slave-start $@;;
	stop)               shift; slave-stop $@;;
  *)
		devargs
		docker run --rm \
		`docker-environment` \
		--name vikingslave $DEV_VOLUME \
		--hostname $HOSTNAME \
		binocarlos/viking slave $@
	;;
	esac
}

# docker controller
cmd-docker() {
	devargs
	$(docker run --rm \
		--name vikingcli `docker-environment` \
		--hostname $HOSTNAME $DEV_VOLUME \
		binocarlos/viking docker $@)
}

# etcdctl controller
cmd-etcdctl() {
	docker run --rm -ti binocarlos/etcdctl --peers $ARPANET_IP:4001 $@
}

#proxy controller
cmd-proxy() {
	devargs
	docker run --rm \
		--name vikingcli `docker-environment` \
		--hostname $HOSTNAME $DEV_VOLUME \
		binocarlos/viking $@
}

cmd-token() {
	curl -L https://discovery.etcd.io/new
}

cmd-vagrant() {
	if [ -z $VIKING_DEV ]; then
		echo "VIKING_DEV variable needed"
		exit 1
	fi
	$VIKING_DEV/vagrant/admin $@
}

# Main Controller
main() {
	case "$1" in
	install)            arpanet $@;;
	master)             shift; cmd-master $@;;
	slave)              shift; cmd-slave $@;;
	docker)							shift; cmd-docker $@;;
	token)							shift; cmd-token $@;;
	etcdctl)            shift; cmd-etcdctl $@;;
  vagrant)            shift; cmd-vagrant $@;;
	*)                  cmd-proxy $@;;
	esac
}

main "$@"