#!/bin/bash

readonly IMAGE="binocarlos/viking"
source ~/.vikingrc
export DOCKER_URL=${DOCKER_URL:="https://get.docker.io/ubuntu/"}
export DOCKER_PORT=${DOCKER_PORT:=2375}
export VIKING_MASTER_PORT=${VIKING_MASTER_PORT:=8791}
export VIKING_ETCD_PATH=${VIKING_ETCD_PATH:="/viking"}
export VIKING_ETCD_PORT=${VIKING_ETCD_PORT:=4001}
export VIKING_ETCD_PEERPORT=${VIKING_ETCD_PEERPORT:=7001}

# INSTALL
check-environment(){
	if [ -z $HOSTNAME ]; then
		echo "HOSTNAME variable needed"
		exit 1
	fi
	if [ -z $VIKING_IP ]; then
		echo "VIKING_IP variable needed"
		exit 1
	fi
	if [ -z $VIKING_MASTERS ]; then
		echo "VIKING_MASTERS variable needed"
		exit 1
	fi
	if [ -z $VIKING_ETCD ]; then
		IFS=',' read -a masters <<< "$VIKING_MASTERS"
		VIKING_ETCD="${masters[0]}:$VIKING_ETCD_PORT"
	fi
}

devargs(){
	DEV_VOLUME=""
	DOCKER_ARGS="-d"
	if [ -n "$VIKING_DEV" ]; then
		DEV_VOLUME="-v $VIKING_DEV:/srv/viking"
		DOCKER_ARGS="-ti --rm"
		echo "running dev mode"
	fi
}

docker-environment(){
	echo "-e VIKING_IP=$VIKING_IP -e VIKING_ETCD=$VIKING_ETCD -e VIKING_MASTERS=$VIKING_MASTERS -e VIKING_MASTER_PORT=$VIKING_MASTER_PORT -e DOCKER_PORT=$DOCKER_PORT -e VIKING_ETCD_PATH=$VIKING_ETCD_PATH"
}

install-docker(){
	curl -sSL $DOCKER_URL | sudo sh
	sysctl -w net.ipv4.ip_forward=1
	echo "DOCKER_OPTS='-H unix:///var/run/docker.sock -H tcp://$VIKING_IP:$DOCKER_PORT'" > /etc/default/docker
	service docker restart
	sleep 2
}

install-core() {	
	install-docker
}

install-slave() {
	#docker pull progrium/registrator
	#docker pull progrium/ambassadord
	echo ""
}

install-master() {
	docker pull binocarlos/etcd
	docker pull binocarlos/smesh
}

cmd-install() {
	check-environment
	case "$1" in	
	core)               shift; install-core $@;;
	slave)              shift; install-slave $@;;
	master)             shift; install-master $@;;
  *)
		echo "usage: viking install <mode>"
	;;
	esac
}

# SLAVE
# registrator / ambassadord & slave monitor
start-registrator(){
	docker run -d \
		--name registrator \
    -v /var/run/docker.sock:/tmp/docker.sock \
    -h $HOSTNAME progrium/registrator -ip=$VIKING_IP etcd://$VIKING_ETCD:$VIKING_ETCD_PORT$VIKING_ETCD_PATH/network
}

start-ambassadord(){

	docker run -d \
		--name backends \
		-v /var/run/docker.sock:/var/run/docker.sock \
		progrium/ambassadord --omnimode

	docker run --rm \
		--privileged \
		--net container:backends \
		progrium/ambassadord --setup-iptables

}

slave-start() {
	devargs
	#start-registrator
	#start-ambassadord
	docker run --rm \
		`docker-environment` \
		--name vikingslave $DEV_VOLUME \
		--hostname $HOSTNAME \
		binocarlos/viking slave join $@
}

slave-stop() {
	devargs
	docker run --rm \
		`docker-environment` \
		--name vikingslave $DEV_VOLUME \
		--hostname $HOSTNAME \
		binocarlos/viking slave leave $@
	#docker stop registrator && docker rm registrator	
	#docker stop backends && docker rm backends
}

cmd-slave() {
	check-environment etcd
	case "$1" in
	start)              shift; slave-start $@;;
	stop)               shift; slave-stop $@;;
  *)
		devargs
		docker run --rm \
		`docker-environment` \
		--name vikingslave $DEV_VOLUME \
		--hostname $HOSTNAME \
		binocarlos/viking slave $@
	;;
	esac
}

# MASTER
# etcd + master http api


etcd-start() {
	if [ -z "$1" ]; then
		echo "usage: viking master start --peers | --token [OPTIONS}"
		exit 1
	fi
	running=$(docker ps | grep smesh)	
	if [ -n "$running" ]; then
		echo "the master is already running"
		exit 1
	fi
	$(docker run --rm binocarlos/smesh start --name vikingetcd --hostname $HOSTNAME --address $VIKING_IP --port $VIKING_ETCD_PORT --peerport $VIKING_ETCD_PEERPORT --dockerargs="-e SERVICE_NAME=vikingetcd" $@)
}

etcd-stop() {
	docker stop vikingetcd && docker rm vikingetcd	
}

apiserver-start() {
	devargs
	docker run $DOCKER_ARGS \
		-p $VIKING_MASTER_PORT:80 `docker-environment` \
		--name vikingmaster \
		--hostname $HOSTNAME \
		-e "SERVICE_NAME=vikingmaster" \
		-e "VIKING_MASTER_PORT=$VIKING_MASTER_PORT" \
		$DEV_VOLUME \
		binocarlos/viking master $@
}

apiserver-stop() {
	docker stop vikingmaster && docker rm vikingmaster	
}

master-start() {
	etcd-start $@
	sleep 1
	api-start	$@
}

master-stop() {
	etcd-stop $@
	api-stop	$@
}

cmd-master() {
	check-environment etcd
	case "$1" in	
	start)              shift; master-start $@;;
	stop)               shift; master-stop $@;;
  *)
		echo "usage: viking master (start|stop)"
	;;
	esac
}

cmd-etcd() {
	check-environment etcd
	case "$1" in	
	start)              shift; etcd-start $@;;
	stop)               shift; etcd-stop $@;;
  *)
		echo "usage: viking etcd (start|stop)"
	;;
	esac
}

cmd-apiserver() {
	check-environment etcd
	case "$1" in	
	start)              shift; apiserver-start $@;;
	stop)               shift; apiserver-stop $@;;
  *)
		echo "usage: viking master (start|stop)"
	;;
	esac
}

cmd-etcdctl() {
	check-environment
	docker run --rm -ti binocarlos/etcdctl --peers $VIKING_IP:$VIKING_ETCD_PORT $@
}

cmd-proxy() {
	devargs
	docker run --rm -ti \
		--name vikingcli `docker-environment` \
		--hostname $HOSTNAME $DEV_VOLUME \
		binocarlos/viking $@
}

cmd-docker() {
	devargs
	$(docker run --rm \
		--name vikingcli `docker-environment` \
		--hostname $HOSTNAME $DEV_VOLUME \
		binocarlos/viking docker $@)
}

# CONTROLLER
main() {
	case "$1" in
	install)            shift; cmd-install $@;;
	master)             shift; cmd-master $@;;
	slave)              shift; cmd-slave $@;;
	etcd)               shift; cmd-etcd $@;;
	apiserver)          shift; cmd-apiserver $@;;
	etcdctl)            shift; cmd-etcdctl $@;;
	docker)							shift; cmd-docker $@;;
	*)                  cmd-proxy $@;;
	esac
}

main "$@"